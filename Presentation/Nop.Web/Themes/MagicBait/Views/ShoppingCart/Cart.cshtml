@model ShoppingCartModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.ShoppingCart").Text);
    //page class
    Html.AppendPageCssClassParts("html-shopping-cart-page");
}
@if (!Model.OnePageCheckoutEnabled)
{
    @await Component.InvokeAsync("CheckoutProgress", new {step = CheckoutProgressStep.Cart})
}
<div class="page shopping-cart-page row justify-content-center">
    <div class="cart-master-con">
        <div class="page-title text-center">
            <h1>@T("ShoppingCart")</h1>
        </div>
        <div class="page-body d-flex flex-column justify-content-center align-items-center">
            @await Component.InvokeAsync("OrderSummary", new { overriddenModel = Model })
        </div>
    </div>
</div>
<script asp-location="Footer">
    $(document).ready(function () {

        //Initially set the value for the add to cart wuantity inputs.
        //This is necessary due to a bug that remembers the previous page's input value,
        //something to do with dynamically inserting the html into the popover
        $('.input-number').val('1');

        $('.btn-number').click(function (e) {
            e.preventDefault();
            fieldName = $(this).data('field');
            parentCon = $('.' + fieldName + '-con');
            type = $(this).attr('data-type');
            input = parentCon.find('#' + fieldName);
            var currentVal = parseInt(input.val());
            if (!isNaN(currentVal)) {
                if (type == 'minus') {

                    if (currentVal > input.attr('min')) {
                        input.val(currentVal - 1).change();
                        $('.btn-number[data-type=plus]').attr('disabled', false);
                    }
                    if (parseInt(input.val()) == input.attr('min')) {
                        $(this).attr('disabled', true);
                    }

                } else if (type == 'plus') {

                    if (currentVal < input.attr('max')) {
                        input.val(currentVal + 1).change();
                        $('.btn-number[data-type=minus]').attr('disabled', false);
                    }
                    if (parseInt(input.val()) == input.attr('max')) {
                        $(this).attr('disabled', true);
                    }

                }
            } else {
                input.val(0);
            }
            $(fieldName + '-con .input-number').focusin(function () {
                $(this).data('oldValue', $(this).val());
            });
            $(fieldName + '-con .input-number').change(function () {

                minValue = parseInt($(this).attr('min'));
                maxValue = parseInt($(this).attr('max'));
                valueCurrent = parseInt($(this).val());

                name = $(this).attr('name');
                if (valueCurrent >= minValue) {
                    $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    alert('Sorry, the minimum value was reached');
                    $(this).val($(this).data('oldValue'));
                }
                if (valueCurrent <= maxValue) {
                    $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    alert('Sorry, the maximum value was reached');
                    $(this).val($(this).data('oldValue'));
                }


            });
            $(fieldName + '-con .input-number').keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

        });

    });
</script>