@model HeaderLinksModel
@using System.Text.Encodings.Web
@using Nop.Web.Framework.Infrastructure

<div class="header-links">
        <div class="mobile-buttons">
            <li class="sidebar-open-button" id="menu-toggle">
                <a><i class="fas fa-arrow-left"></i> Menu</a>
            </li><!--
            --><li id="mobile-search-fixed" class="search-box">
                @await Component.InvokeAsync("SearchBox")
            </li><!--
            --><li class="top-fixed-totals">
                Cart Total:<br /><strong class="price"></strong>
            </li><!--
            --><li id="fixed-checkout">
                <input type="button" value="Checkout" class="button-1 checkout-button" onclick="setLocation('/checkout')" />
            </li>
        </div>
        <div class="desktop-buttons">
            <ul>
                <li class="sidebar-open-button" id="menu-toggle-desktop">
                    <a><i class="fas fa-arrow-left"></i> Menu</a>
                </li>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
                @if (Model.IsAuthenticated)
                {
                    <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
                    <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
                }
                else
                {
                    <li><a href="@Url.RouteUrl("Register")" class="ico-register">@T("Account.Register")</a></li>
                    <li><a href="@Url.RouteUrl("Login")" class="ico-login">@T("Account.Login")</a></li>
                }
                @if (Model.AllowPrivateMessages)
                {
                    <li>
                        <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                            <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                            <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                        </a>
                    </li>
                }
                @if (Model.WishlistEnabled)
                {
                    <li>
                        <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                            <span class="wishlist-label">@T("Wishlist")</span>
                        </a>
                    </li>
                }
                @if (Model.ShoppingCartEnabled)
                {
                    <li id="topcartlink">
                        <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                            <span class="cart-label">@T("ShoppingCart")</span> <i class="fas fa-arrow-down"></i>
                        </a>
                    </li>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
            </ul>
        </div>
    @await Component.InvokeAsync("FlyoutShoppingCart")
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {

                $('.top-fixed-totals .price').append(cartPrice);

                $('#topcartlink').mouseenter(function (e) {
                    $('#topcartlink').addClass('topcartlink-active');
                    $('#flyout-cart').slideDown();
                });

                $('#flyout-cart-close').click(function () {
                    $('#flyout-cart').slideUp();
                    $('#topcartlink').removeClass('topcartlink-active');
                });

                $('html').click(function (e) {
                    //if clicked element is not your element and parents aren't your div
                    if (e.target.id != 'flyout-cart-close' && $(e.target).parents('#flyout-cart-close').length == 0) {
                        //do stuff
                        $('#flyout-cart').slideUp();
                        $('#topcartlink').removeClass('topcartlink-active');
                    }
                });

            });

            //adjust for the fixed mobile header
            $(window).on("load resize", function (e) {
                if ($(window).width() < 1030) {
                    var stickyPadding = $('.header-links').outerHeight();
                    $('#page-content-wrapper').css({ 'margin-top': stickyPadding + 'px' });
                } else {
                    $('#page-content-wrapper').css({ 'margin-top': '0px' });
                }
            });
        </script>
    }
</div>