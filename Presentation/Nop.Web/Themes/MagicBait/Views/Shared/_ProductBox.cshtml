@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Web.Framework.Infrastructure
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 9999;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-item product-@Model.Id d-flex flex-column justify-content-center align-items-center"
     id="product-@Model.Id"
     data-productid="@Model.Id"
     role="button"
     data-html="true"
     data-toggle="popover"
     data-trigger="manual"
     data-placement="auto"
     data-container=".product-@Model.Id"
     title="<button type='button' class='close-button hvr-grow'></button><span></span><a class='secondary-button' href='@Url.RouteUrl("Product", new {SeName = Model.SeName})'>View Product</a>"
     data-content="">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <h3 class="product-title truncate">
        <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
    </h3>
    <div class="short-description text-center">@Model.ShortDescription</div>
    <div class="product-quickview d-flex flex-column jsutify-content-center align-items-center">
        <span class="price actual-price">@Model.ProductPrice.Price</span>
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">View Product</a>
    </div>
    <div class="buttons mt-2">
        @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
        @if (!Model.ProductPrice.DisableBuyButton)
        {
            var addToCartText = T("ShoppingCart.AddToCart").Text;
            if (Model.ProductPrice.IsRental)
            {
                addToCartText = T("ShoppingCart.Rent").Text;
            }
            if (Model.ProductPrice.AvailableForPreOrder)
            {
                addToCartText = T("ShoppingCart.PreOrder").Text;
            }
            <div class="row no-gutters qty@(Model.Id)-con">
                <div class="col-4">
                    <span class="input-group-btn">
                        <button type="button" title="Minus" class="btn-minus btn-number" data-type="minus" data-field="qty@(Model.Id)">
                            <i class="fas fa-minus"></i>
                        </button>
                    </span>
                </div>
                <div class="col-4">
                    @Html.TextBox("qty" + Model.Id, "1", new { @class = "input-number", @min = "1", @max = "9999" })
                </div>
                <div class="col-4">
                    <span class="input-group-btn">
                        <button type="button" title="Plus" class="btn-plus btn-number" data-type="plus" data-field="qty@(Model.Id)">
                            <i class="fas fa-plus"></i>
                        </button>
                    </span>
                </div>
            </div>



            //Load product service
            var productService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Catalog.IProductService>();

            var product = productService.GetProductById(Model.Id);

            if (product.ProductAttributeMappings.Count > 0 && product.ProductAttributeMappings.Any(p => p.IsRequired))
            {
                // This product has required fields to choose from, so NopCommerce will automatically direct them to the product page.
                // This checks if the product has required atttributes, and if so, changes the text of the "Add to cart" button, and
                // also will not trigger the loading animation

                <input type="button" value="Choose options" class="button-2 mt-1 mb-3 py-2 px-3 product-box-add-to-cart-button align-items-center" title="Choose options for @(Model.Name)" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', '@Model.Id');return false;" />

            }
            else
            {

                <input type="button" value="@(addToCartText)" class="button-2 mt-1 mb-3 py-2 px-3 product-box-add-to-cart-button align-items-center" title="Add @(Model.Name) to Cart" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', '@Model.Id');$('.loading').css('display', 'block');return false;" />

            }



        }
        @if (!Model.ProductPrice.DisableAddToCompareListButton)
        {
            <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
        }
        @if (!Model.ProductPrice.DisableWishlistButton)
        {
            <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
        }
    </div>


    <div class="product-popover-html" style="display: none;">
        <div class="details product-popover-@Model.Id">
            <div class="row align-items-center">
                <div class="col-xs-12 col-sm-6">
                    <h2 class="product-title">
                        <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                    </h2>
                    <div class="light-hr"></div>
                    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                    {
                        <div class="sku">
                            @Model.Sku
                        </div>
                    }
                    <div class="prices">
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                        }
                        <span class="price actual-price">@Model.ProductPrice.Price</span>
                        @if (Model.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                        {
                            <div class="base-price-pangv">
                                @Model.ProductPrice.BasePricePAngV
                            </div>
                        }
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <div class="add-info">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                        <div class="buttons">
                            @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                            @if (!Model.ProductPrice.DisableBuyButton)
                            {
                                var addToCartText = T("ShoppingCart.AddToCart").Text;
                                if (Model.ProductPrice.IsRental)
                                {
                                    addToCartText = T("ShoppingCart.Rent").Text;
                                }
                                if (Model.ProductPrice.AvailableForPreOrder)
                                {
                                    addToCartText = T("ShoppingCart.PreOrder").Text;
                                }
                                <div class="row no-gutters qty@(Model.Id)-con">
                                    <div class="col-4">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn-minus btn-number" data-type="minus" data-field="qty@(Model.Id)">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                        </span>
                                    </div>
                                    <div class="col-4">
                                        @Html.TextBox("qty" + Model.Id, "1", new { @class = "input-number", @min = "1", @max = "9999" })
                                    </div>
                                    <div class="col-4">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn-plus btn-number" data-type="plus" data-field="qty@(Model.Id)">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </span>
                                    </div>
                                </div>

                                <button class="button-2 my-3 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', '@Model.Id');return false;">@(addToCartText)</button>
                                                                }
                                                                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                                                                {
                                                                    <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                                                                }
                                                                @if (!Model.ProductPrice.DisableWishlistButton)
                                                                {
                                                                    <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                                                                }
</div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
                    </div>
                </div>
                <!--Popover Short Description-->
                <div class="col-xs-12 p-3">
                    <p>
                        @Html.Raw(Model.FullDescription)
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<script asp-location="Footer">

    $(document).ready(function () {
        $('.truncate').succinct({
            size: 120
        });
    });

</script>