@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@using Nop.Web.Framework.Infrastructure
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential max-width-block align-items-center justify-content-center">
                    <div class="row justify-content-center align-items-center">
                        <div class="col-xs-12 col-md-6">
                            <div class="single-product-picture-inner-con">
                                <!--product pictures-->
                                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            </div>
                        </div>
                        <!--
        -->
                        <div class="col-xs-12 col-md-6">
                            <div class="single-product-overview-inner-con">
                                <div class="overview">
                                    @await Html.PartialAsync("_Discontinued", Model)
                                    <div class="product-name">
                                        <h1 itemprop="name">
                                            @Model.Name
                                        </h1>
                                        <h2 id="variation-name"></h2>
                                    </div>
                                    @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                    {
                                        <div class="short-description my-3">
                                            @Html.Raw(Model.ShortDescription)
                                        </div>
                                    }
                                    <!--price & add to cart-->
                                    @{
                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                        @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                        <div class="light-hr"></div>
                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                        @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                    <!--product reviews-->
                                    @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                    <!--manufacturers-->
                                    @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                                    <!--availability-->
                                    @await Html.PartialAsync("_Availability", Model)
                                    <!--SKU, MAN, GTIN, vendor-->
                                    @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                                    <!--delivery-->
                                    @await Html.PartialAsync("_DeliveryInfo", Model)
                                    <!--sample download-->
                                    @await Html.PartialAsync("_DownloadSample", Model)
                                    <!--gift card-->
                                    @{
                                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                        @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                    }
                                    <!--rental info-->
                                    @{
                                        var dataDictRental = new ViewDataDictionary(ViewData);
                                        dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                        @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                    }
                                    <!--wishlist, compare, email a friend-->
                                    <div class="overview-buttons">
                                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                        @{
                                            var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                            @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                        }
                                        @await Html.PartialAsync("_CompareProductsButton", Model)
                                        @* @await Html.PartialAsync("_ProductEmailAFriendButton", Model) *@
                                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                    </div>
                                    @await Html.PartialAsync("_ShareButton", Model)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                                </div>
                            </div>
                        </div>
                        <!--
        -->
                    </div>
                    <div class="row d-flex justify-content-center align-items-center">
                        <div class="col">
                            <!--attributes-->
                            @{
                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description row" itemprop="description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                    <div class="product-collateral">
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                        @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                    </div>
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </div>
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>

<script asp-location="Footer">
    $(document).ready(function () {

        //Initially set the value for the add to cart wuantity inputs.
        //This is necessary due to a bug that remembers the previous page's input value,
        //something to do with dynamically inserting the html into the popover
        $('.input-number').val('1');

        $('.btn-number').click(function (e) {
            e.preventDefault();
            fieldName = $(this).data('field');
            parentCon = $('.' + fieldName + '-con');
            type = $(this).attr('data-type');
            input = parentCon.find('#' + fieldName);
            var currentVal = parseInt(input.val());
            if (!isNaN(currentVal)) {
                if (type == 'minus') {

                    if (currentVal > input.attr('min')) {
                        input.val(currentVal - 1).change();
                        $('.btn-number[data-type=plus]').attr('disabled', false);
                    }
                    if (parseInt(input.val()) == input.attr('min')) {
                        $(this).attr('disabled', true);
                    }

                } else if (type == 'plus') {

                    if (currentVal < input.attr('max')) {
                        input.val(currentVal + 1).change();
                        $('.btn-number[data-type=minus]').attr('disabled', false);
                    }
                    if (parseInt(input.val()) == input.attr('max')) {
                        $(this).attr('disabled', true);
                    }

                }
            } else {
                input.val(0);
            }
            $(fieldName + '-con .input-number').focusin(function () {
                $(this).data('oldValue', $(this).val());
            });
            $(fieldName + '-con .input-number').change(function () {

                minValue = parseInt($(this).attr('min'));
                maxValue = parseInt($(this).attr('max'));
                valueCurrent = parseInt($(this).val());

                name = $(this).attr('name');
                if (valueCurrent >= minValue) {
                    $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    alert('Sorry, the minimum value was reached');
                    $(this).val($(this).data('oldValue'));
                }
                if (valueCurrent <= maxValue) {
                    $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    alert('Sorry, the maximum value was reached');
                    $(this).val($(this).data('oldValue'));
                }


            });
            $(fieldName + '-con .input-number').keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

        });

    });
</script>