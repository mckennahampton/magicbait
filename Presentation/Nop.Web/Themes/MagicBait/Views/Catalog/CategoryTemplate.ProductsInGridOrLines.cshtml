@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@using Nop.Web.Framework.Infrastructure
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <div class="row no-gutters justify-content-center" style="width: 100%;">
                <div class="col-xs-12 col-sm-8 text-left">
                    <ul itemscope itemtype="http://schema.org/BreadcrumbList">
                        <li>
                            <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                        </li>
                        @{ int position = 1; }
                        @foreach (var cat in Model.CategoryBreadcrumb)
                        {
                            var isLastCategory = cat.Id == Model.Id;
                            <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                                @if (isLastCategory)
                                {
                                    @cat.Name
                                    <span itemprop="item" itemscope itemtype="http://schema.org/Thing">
                                        <link itemprop="url" href="@Url.RouteUrl("Category", new {SeName = cat.SeName})" />
                                    </span>
                                }
                                else
                                {
                                    <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item">
                                        <span itemprop="name">@cat.Name</span>
                                    </a>
                                }
                                <meta itemprop="position" content="@position" />
                            </li>
                            position++;
                        }
                    </ul>
                </div>
            </div>
        </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
                }
                }
                <div class="page category-page">
                    <div class="page-title">
                        <h1>@Model.Name</h1>
                        @*description*@
                        @if (!string.IsNullOrWhiteSpace(Model.Description))
                        {
                            <div class="category-description">
                                @Html.Raw(Model.Description)
                            </div>
                        }
                    </div>
                    <div class="light-hr-100"></div>
                    <div class="page-body">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
                        @*subcategories*@
                        @* @if (Model.SubCategories.Count > 0)
        {
            <div class="category-grid sub-category-grid">
                <div class="row">
                    @foreach (var item in Model.SubCategories)
                    {
                        <div class="d-none d-sm-block col-sm-4 col-md-3 p-3">
                            <div class="sub-category-item">
                                <h2 class="title">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        @item.Name
                                    </a>
                                </h2>
                                <div class="picture">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        } *@
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
                        @*featured products*@
                        @if (Model.FeaturedProducts.Count > 0)
                        {
                            <div class="product-grid featured-product-grid">
                                <div class="title">
                                    <strong>@T("Products.FeaturedProducts")</strong>
                                </div>
                                <div class="item-grid">
                                    @foreach (var item in Model.FeaturedProducts)
                                    {
                                        <div class="item-box">
                                            @await Html.PartialAsync("_ProductBox", item)
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
                        <div class="product-filters">
                            @*filtering*@
                            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
                            {
                                @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
                            }
                            @*filtering*@
                            @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
                            {
                                @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
                            }
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
                        @if (Model.Products.Count > 0)
                        {
                            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
                        }
                        @if (Model.Products.Count > 0)
                        {
                            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                                <div class="item-grid row justify-content-around align-items-end">
                                    @foreach (var product in Model.Products)
                                    {
                                        <div class="item-box col-xs-12 col-sm-6 col-lg-6 col-xxl-4 col-xxxl-3 px-3 pb-2 my-3 mx-2">
                                            @await Html.PartialAsync("_ProductBox", product)
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @{
                            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                        }
                        @if (!pager.IsEmpty())
                        {
                            <div class="pager">
                                @pager
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
                    </div>
                </div>
<script asp-location="Footer">
    $(document).ready(function () {

        //Initially set the value for the add to cart wuantity inputs.
        //This is necessary due to a bug that remembers the previous page's input value,
        //something to do with dynamically inserting the html into the popover
        $('.input-number').val('1');

        $('.btn-number').click(function (e) {
            e.preventDefault();
            fieldName = $(this).data('field');
            parentCon = $('.' + fieldName + '-con');
            type = $(this).attr('data-type');
            input = parentCon.find('#' + fieldName);
            var currentVal = parseInt(input.val());
            if (!isNaN(currentVal)) {
                if (type == 'minus') {

                    if (currentVal > input.attr('min')) {
                        input.val(currentVal - 1).change();
                        $('.btn-number[data-type=plus]').attr('disabled', false);
                    }
                    if (parseInt(input.val()) == input.attr('min')) {
                        $(this).attr('disabled', true);
                    }

                } else if (type == 'plus') {

                    if (currentVal < input.attr('max')) {
                        input.val(currentVal + 1).change();
                        $('.btn-number[data-type=minus]').attr('disabled', false);
                    }
                    if (parseInt(input.val()) == input.attr('max')) {
                        $(this).attr('disabled', true);
                    }

                }
            } else {
                input.val(0);
            }
            $(fieldName + '-con .input-number').focusin(function () {
                $(this).data('oldValue', $(this).val());
            });
            $(fieldName + '-con .input-number').change(function () {

                minValue = parseInt($(this).attr('min'));
                maxValue = parseInt($(this).attr('max'));
                valueCurrent = parseInt($(this).val());

                name = $(this).attr('name');
                if (valueCurrent >= minValue) {
                    $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    alert('Sorry, the minimum value was reached');
                    $(this).val($(this).data('oldValue'));
                }
                if (valueCurrent <= maxValue) {
                    $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    alert('Sorry, the maximum value was reached');
                    $(this).val($(this).data('oldValue'));
                }


            });
            $(fieldName + '-con .input-number').keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

        });

    });
</script>