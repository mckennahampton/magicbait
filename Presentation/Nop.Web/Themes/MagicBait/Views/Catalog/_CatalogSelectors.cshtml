@model CatalogPagingFilteringModel
@using Nop.Web.Framework.Infrastructure
<div class="product-selectors flex-column flex-sm-row justify-content-center justify-content-lg-start align-items-center">
    @*view mode*@
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
            <span>@T("Catalog.ViewMode")</span>
            @if (Model.AvailableViewModes.Count > 1)
            {
                var gridMode = Model.AvailableViewModes[0];
                var listMode = Model.AvailableViewModes[1];

                <a class="viewmode-icon grid @if(gridMode.Selected){<text>selected</text>}" href="@gridMode.Value" title="@gridMode.Text">@gridMode.Text</a>
                <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" href="@listMode.Value" title="@listMode.Text">@listMode.Text</a>
            }
        </div>
    }
    @*sorting*@
    @if (Model.AllowProductSorting)
    {
        <div class="product-sorting form-group">
            <label for="products-orderby">@T("Catalog.OrderBy")</label>
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions,  new { onchange = "setLocation(this.value);", aria_label = T("Catalog.OrderBy.Label"), @class = "form-control" })
        </div>
    }
    @*page size*@
    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size form-group">
            <label for="products-pagesize">@T("Catalog.PageSize")</label>
            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.PageSize.Label"), @class = "form-control" })
            <span>@T("Catalog.PageSize.PerPage")</span>
        </div>
    }
</div>